package Tetris.Game {	import flash.events.*;	import flash.utils.getDefinitionByName;	import Tetris.Game.Blocks.*;	import Tetris.Game.Blocks;	import Tetris.Core.Utils;		public class UI {		private static var score = new Object();		private static var nextBlock = new Object();		private static var TextScore;		private static var TextLines;		private static var NextBlockArea;		private static var DarkOverlay;		private static var stage;		private static var tempDrawables;				/** 		 * Initialize the game UI		 */		public static function initialize(stage, TextScore, TextLines, NextBlockArea, DarkOverlay) {			// Store references			UI.stage = stage;			UI.TextScore = TextScore;			UI.TextLines = TextLines;			UI.NextBlockArea = NextBlockArea;			UI.DarkOverlay = DarkOverlay;						// Reset score			UI.TextScore.text = "0";			UI.TextLines.text = "0";			UI.score.lines = 0;			UI.score.score = 0;						// Reset "next block"			UI.nextBlock.color = '';			UI.nextBlock.formation = new Array();			UI.tempDrawables = new Array();					}		/**		 * Update the stats (score/lines)		 * @param String key		 * @param Number amount		 */		public static function updateStats(key, amount = 1) {			UI.score[key] += amount;						UI.TextScore.text = UI.score.score;			UI.TextLines.text = UI.score.lines;		}		/**		 * Make the player lose		 */		public static function lose() {			trace('Player lost');						var framerate = UI.stage.frameRate;						UI.stage.frameRate = 0;			UI.DarkOverlay.visible = true;						var parent = UI.DarkOverlay.parent;			parent.setChildIndex(UI.DarkOverlay, parent.numChildren-1);			stage.addEventListener(MouseEvent.CLICK, function(e) {				// Reset game				UI.score.lines = 0;				UI.score.score = 0;				UI.nextBlock.color = '';				UI.nextBlock.coordinates = new Array();				UI.DarkOverlay.visible = false;								Blocks.reset();								UI.stage.frameRate = framerate;   			});		}		/**		 * Update the next block viewer		 * @param String color		 * @param Array formation		 */		public static function setNextBlock(color, formation) {			UI.nextBlock.color = color;			UI.nextBlock.coordinates = formation;						// Remove old next block from screen			if (UI.tempDrawables.length) {				UI.tempDrawables.forEach(function(block) {					block.parent.removeChild(block); 				});			}						// Reset			UI.tempDrawables = new Array();						// Draw user blocks			UI.nextBlock.coordinates.forEach(function(block) {					UI.drawBlock(UI.nextBlock.color, block[0], block[1]);			});		}				/**		 * Queue a draw call of the block		 * @param String color		 * @param Number x		 * @param Number y		 */		private static function drawBlock(color, x, y) {			var color = Utils.upperCase(color);			var blockClass:Class = getDefinitionByName("Tetris.Game.Blocks.Block" + color) as Class;			var myInstance: Block = new blockClass();			UI.tempDrawables.push(myInstance);			UI.tempDrawables[UI.tempDrawables.length - 1].x = x * 20 + 480;			UI.tempDrawables[UI.tempDrawables.length - 1].y = y * 20 + 60;			UI.tempDrawables[UI.tempDrawables.length - 1].width = Config.grid.size/2;			UI.tempDrawables[UI.tempDrawables.length - 1].height = Config.grid.size/2;									UI.stage.addChild(UI.tempDrawables[UI.tempDrawables.length - 1]);		}	}}